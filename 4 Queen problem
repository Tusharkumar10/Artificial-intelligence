graph={
'A':['B','C','D','E'],
'B':['F','G'],
'C':['H'],
'D':['I'],
'E':['J','K'],
'F':[],
'G':['L'],
'H':['M'],
'I':['N'],
'J':['O'],
'K':[],
'L':[],
'M':['P'],
'N':['Q'],
'O':[],
'P':[],
'Q':[]
}

label={
'A':[0,0],
'B':[1,1],
'C':[1,2],
'D':[1,3],
'E':[1,4],
'F':[2,3],
'G':[2,4],
'H':[2,4],
'I':[2,1],
'J':[2,1],
'K':[2,2],
'L':[3,2],
'M':[2,1],
'N':[3,4],
'O':[3,3],
'P':[4,3],
'Q':[4,2]   
}

visited=set()
res=['Q']
stack=[]
def dfs(visited,graph,node):
  visited.add(node)
  stack.append(node)
  while stack:
    curr_node=stack.pop(-1)
    print(curr_node,label[curr_node],end=' ')
    if curr_node in res:
      return
    for nbd in reversed(graph[curr_node]):
        if nbd not in visited:
          visited.add(nbd)
          stack.append(nbd)
dfs(visited,graph,'A')
 
